#include <iostream>
#include <algorithm>
#include <cstring>
#include <queue>
using namespace std;
int board[301][301];
int dx[8] = {1,2,2,1,-1,-2,-2,-1};
int dy[8] = {2,1,-1,-2,-2,-1,1,2};
int l;
void BFS(int a, int b);
int main()
{
    int t; cin >> t;
    while (t--)
    {
        cin >> l;
        int x1, y1; cin >> x1 >> y1;
        BFS(x1, y1);
        int x2, y2; cin >> x2 >> y2;
        cout << board[x2][y2] - 1 << '\n';
        memset(board, 0, sizeof(board));
    }
    return 0;
}
void BFS(int a, int b)
{
    queue<pair<int, int>> q;
    q.push(make_pair(a, b));
    board[a][b] = 1;
    while (!q.empty())
    {
        auto[x, y] = q.front();
        q.pop();
        for (int i = 0; i < 8; i++)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (nx >= 0 && nx < l && ny >= 0 && ny < l && board[nx][ny] == 0)
            {
                q.push(make_pair(nx, ny));
                board[nx][ny] = board[x][y] + 1;
            }
        }
    }
}
