#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n; cin >> n;
    vector<long long> arr(n), idx(n);
    for (long long& i : arr) cin >> i;
    vector<long long> dp;
    dp.push_back(arr[0]);
    for (int i = 1; i < n; i++)
    {
        long long k = arr[i];
        if (k > *(--dp.end())) dp.push_back(k);
        else *lower_bound(dp.begin(), dp.end(), k) = k;
        idx[i] = lower_bound(dp.begin(), dp.end(), k) - dp.begin();
    }
    int s = dp.size();
    cout << s << '\n';
    vector<long long> res;
    int cur = s - 1;
    for (int i = n - 1; i >= 0; i--)
    {
        if (idx[i] == cur)
        {
            res.push_back(arr[i]);
            cur--;
        }
    }
    int ds = res.size();
    for (int i = ds - 1; i >= 0; i--)
        cout << res[i] << ' ';
    return 0;
}
