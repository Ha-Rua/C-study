#include <iostream>
#include <cstring>
#include <queue>
using namespace std;
int box[1001][1001];
int n, m;
int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, 1, 0, -1};
void BFS(queue<pair<int, int>> q);
int main()
{
    memset(box, -1, sizeof(box));
    cin >> m >> n;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            cin >> box[i][j];
        }
    }
    queue<pair<int, int>> arr;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (box[i][j] == 1)
            {
                arr.push(make_pair(i, j));
            }
        }
    }
    BFS(arr);
    int max = 0;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (box[i][j] == 0)
            {
                cout << -1;
                return 0;
            }
            else
            {
                max = box[i][j] > max ? box[i][j] : max;
            }
        }
    }
    cout << max - 1;
    return 0;
}
void BFS(queue<pair<int, int>> q)
{
    while (!q.empty())
    {
        auto[x, y] = q.front();
        q.pop();
        for (int i = 0; i < 4; i++)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (nx >= 0 && nx < n && ny >= 0 && ny < m &&  box[nx][ny] == 0)
            {
                q.push(make_pair(nx, ny));
                box[nx][ny] = box[x][y] + 1;
            }
        }
    }
}
