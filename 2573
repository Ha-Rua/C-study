#include <iostream>
using namespace std;
int n, m;
pair<int, int> graph[301][301];
int dx[4] = {1, -1, 0, 0};
int dy[4] = {0, 0, 1, -1};
void DFS(int a, int b);
int main()
{
    cin >> n >> m;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            cin >> graph[i][j].first;
            if(graph[i][j].first)
                graph[i][j].second = 1;
        }
    }
    int res = 0;
    int cur;
    do {
        res++;
        cur = 0;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if (graph[i][j].second == 1)
                {
                    for (int k = 0; k < 4; k++)
                    {
                        if (graph[i+dx[k]][j+dy[k]].second == 0)
                        {
                            if (graph[i][j].first > 0)
                                graph[i][j].first--;
                        }
                    }
                }
            }
        }
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if(graph[i][j] == make_pair(0, 1))
                    graph[i][j].second = 0;
            }
        }
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if(graph[i][j] == make_pair(0, 1))
                    graph[i][j].second = 0;
            }
        }
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if (graph[i][j].second == 1)
                {
                    cur++;
                    DFS(i, j);
                }
            }
        }
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if (graph[i][j].first > 0)
                {
                    graph[i][j].second = 1;
                }
            }
        }
        if (cur == 0) res = 0;
    } while (cur == 1);
    cout << res;
    return 0;
}
void DFS(int a, int b)
{
    graph[a][b].second = 0;
    for (int i = 0; i < 4; i++)
    {
        if (graph[a+dx[i]][b+dy[i]].second == 1)
            DFS(a+dx[i], b+dy[i]);
    }
}
