#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
bool visited[1001];
vector<int> graph[1001];
void DFS(int v) {
    visited[v] = true;
    for (int i = 0; i < graph[v].size(); i++) {
        if (!visited[graph[v][i]]) {
            DFS(graph[v][i]);
        }
    }
};
int main() {
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    for (int i = 1; i <= n; i++)
        sort(graph[i].begin(), graph[i].end());
    int res = 0;
    for (int i = 1; i <= n; i++)
    {
        if (visited[i] == false)
        {
            DFS(i);
            res++;
        }
    }
    cout << res;
    return 0;
}
