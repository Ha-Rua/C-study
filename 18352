#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
using namespace std;
int n, m, start;
int dist[300001];
int INF = 2147483647;
vector<pair<int, int>> graph[300001];
void dijkstra(int s)
{
    priority_queue<pair<int, int>> pq;
    pq.push({0, s});
    dist[s] = 0;
    while(!pq.empty())
    {
        int cost = -pq.top().first;
        int here = pq.top().second;
        pq.pop();
        if (dist[here] < cost) continue;
        for (int i = 0; i < graph[here].size(); i++)
        {
            int dis = cost + graph[here][i].second;
            if (dis < dist[graph[here][i].first])
            {
                dist[graph[here][i].first] = dis;
                pq.push({-dis, graph[here][i].first});
            }
        }
    }
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    int k;
    cin >> n >> m >> k >> start;
    for (int i = 0; i < m; i++)
    {
        int a, b;
        cin >> a >> b;
        graph[a].push_back(make_pair(b, 1));
    }
    fill(dist, dist + n + 1, INF);
    dijkstra(start);
    vector<int> res;
    for (int i = 1; i <= n; i++)
    {
        if (dist[i] == k) res.push_back(i);
    }
    if (res.empty()) cout << -1;
    else
    {
        sort(res.begin(), res.end());
        int s = res.size();
        for (int i = 0; i < s; i++)
        {
            cout << res[i] << '\n';
        }
    }
    return 0;
}
