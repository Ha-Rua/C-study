#include <iostream>
#include <string>
using namespace std;
void DFS1(int a, int b, char c);
void DFS2(int a, int b, char c);
char normalgraph[101][101];
char notnormalgraph[101][101];
int n;
int main()
{
    
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        string s; cin >> s;
        for (int j = 0; j < n; j++)
        {
            normalgraph[i][j] = s[j];
            if (s[j] == 'G')
                notnormalgraph[i][j] = 'R';
            else
                notnormalgraph[i][j] = s[j];
        }
    }
    int res1 = 0, res2 = 0;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (normalgraph[i][j] != '#')
            {
                DFS1(i, j, normalgraph[i][j]);
                res1++;
            }
            if (notnormalgraph[i][j] != '#')
            {
                DFS2(i, j, notnormalgraph[i][j]);
                res2++;
            }
        }
    }
    cout << res1 << " " << res2;
    return 0;
}
void DFS1(int a, int b, char c)
{
    if (a < 0 || a >= n || b < 0 || b >= n) return;
    if (normalgraph[a][b] != '#')
    {
        normalgraph[a][b] = '#';
        if (a - 1 >= 0)
        {
            if (normalgraph[a - 1][b] == c)
                DFS1(a - 1, b, normalgraph[a - 1][b]);
        }
        if (a + 1 < n)
        {
            if (normalgraph[a + 1][b] == c)
                DFS1(a + 1, b, normalgraph[a + 1][b]);
        }
        if (b - 1 >= 0)
        {
            if (normalgraph[a][b - 1] == c)
                DFS1(a, b - 1, normalgraph[a][b - 1]);
        }
        if (b + 1 < n)
        {
            if (normalgraph[a][b + 1] == c)
                DFS1(a, b + 1, normalgraph[a][b + 1]);
        }
    }
    return;
}
void DFS2(int a, int b, char c)
{
    if (a < 0 || a >= n || b < 0 || b >= n) return;
    if (notnormalgraph[a][b] != '#')
    {
        notnormalgraph[a][b] = '#';
        if (a - 1 >= 0)
        {
            if (notnormalgraph[a - 1][b] == c)
                DFS2(a - 1, b, notnormalgraph[a - 1][b]);
        }
        if (a + 1 < n)
        {
            if (notnormalgraph[a + 1][b] == c)
                DFS2(a + 1, b, notnormalgraph[a + 1][b]);
        }
        if (b - 1 >= 0)
        {
            if (notnormalgraph[a][b - 1] == c)
                DFS2(a, b - 1, notnormalgraph[a][b - 1]);
        }
        if (b + 1 < n)
        {
            if (notnormalgraph[a][b + 1] == c)
                DFS2(a, b + 1, notnormalgraph[a][b + 1]);
        }
    }
    return;
}
