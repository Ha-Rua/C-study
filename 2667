#include <iostream>
#include <queue>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;
vector<int> arr;
int graph[26][26];
int n;
int dx[4] = {0,1,0,-1};
int dy[4] = {1,0,-1,0};
void BFS(int a, int b);
int main()
{
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        string s; cin >> s;
        for (int j = 0; j < n; j++)
            graph[i][j] = s.at(j) - '0';
    }
    int res = 0;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (graph[i][j] == 1)
            {
                BFS(i, j);
                res++;
            }
        }
    }
    sort(arr.begin(), arr.end());
    cout << res << '\n';
    for (int i = 0; i < arr.size(); i++)
        cout << arr[i] << '\n';
    return 0;
}
void BFS(int a, int b)
{
    int area = 0;
    queue<pair<int, int>> q;
    q.push({a,b});
    graph[a][b] = 0;
    while (!q.empty())
    {
        auto[x, y] = q.front();
        q.pop();
        area++;
        for (int i = 0; i < 4; i++)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (nx >= 0 && nx < n && ny >= 0 && ny < n && graph[nx][ny] == 1)
            {
                q.push({nx,ny});
                graph[nx][ny] = 0;
            }
        }
    }
    arr.push_back(area);
}
