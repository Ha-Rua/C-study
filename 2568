#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    int n; cin >> n;
    vector<pair<int, int>> arr(n);
    for (int i = 0; i < n; i++) cin >> arr[i].first >> arr[i].second;
    sort(arr.begin(), arr.end());
    vector<int> dp, idx(n);
    dp.push_back(arr[0].second);
    for (int i = 0; i < n; i++)
    {
        int k = arr[i].second;
        if (k > *(--dp.end())) dp.push_back(k);
        else *lower_bound(dp.begin(), dp.end(), k) = k;
        idx[i] = lower_bound(dp.begin(), dp.end(), k) - dp.begin();
    }
    int s = dp.size();
    cout << n - s << '\n';
    vector<int> lis;
    int cur = s - 1;
    for (int i = n - 1; i >= 0; i--)
    {
        if (idx[i] == cur)
        {
            lis.push_back(arr[i].second);
            cur--;
        }
    }
    vector<int> res;
    for (int i = 0; i < n; i++)
    {
        if (find(lis.begin(), lis.end(), arr[i].second) == lis.end()) res.push_back(arr[i].first);
    }
    sort(res.begin(), res.end());
    for (int i : res) cout << i << '\n';
    return 0;
}
