#include <iostream>
#include <cstring>
#include <queue>
#include <tuple>
using namespace std;
int box[101][101][101];
int n, m, h;
int dx[6] = {1, 0, -1, 0, 0, 0};
int dy[6] = {0, 1, 0, -1, 0, 0};
int dz[6] = {0, 0, 0, 0, 1, -1};
void BFS(queue<tuple<int, int, int>> q);
int main()
{
    memset(box, -1, sizeof(box));
    cin >> m >> n >> h;
    for (int i = 0; i < h; i++)
    {
        for (int j = 0; j < n; j++)
        {
            for (int k = 0; k < m; k++)
            {
                cin >> box[j][k][i];
            }
        }
    }
    queue<tuple<int, int, int>> arr;
    for (int i = 0; i < h; i++)
    {
        for (int j = 0; j < n; j++)
        {
            for (int k = 0; k < m; k++)
            {
                if (box[j][k][i] == 1)
                {
                    arr.push(make_tuple(j, k, i));
                }
            }
        }
    }
    BFS(arr);
    int max = 0;
    for (int i = 0; i < h; i++)
    {
        for (int j = 0; j < n; j++)
        {
            for (int k = 0; k < m; k++)
            {
                if (box[j][k][i] == 0)
                {
                    cout << -1;
                    return 0;
                }
                else
                {
                    max = box[j][k][i] > max ? box[j][k][i] : max;
                }
            }
        }
    }
    cout << max - 1;
    return 0;
}
void BFS(queue<tuple<int, int, int>> q)
{
    while (!q.empty())
    {
        auto[x, y, z] = q.front();
        q.pop();
        for (int i = 0; i < 6; i++)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];
            int nz = z + dz[i];
            if (nx >= 0 && nx < n && ny >= 0 && ny < m && nz >= 0 && nz < h && box[nx][ny][nz] == 0)
            {
                q.push(make_tuple(nx, ny, nz));
                box[nx][ny][nz] = box[x][y][z] + 1;
            }
        }
    }
}
