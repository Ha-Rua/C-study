#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;
int n, m;
bool graph[101][101];
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1};
vector<int> areas;
void BFS(int a, int b);
int main()
{
    int k;
    cin >> n >> m >> k;
    for (int i = 0; i < k; i++)
    {
        int x1, y1, x2, y2;
        cin >> x1 >> y1 >> x2 >> y2;
        for (int j = y1; j < y2; j++)
        {
            for (int k = x1; k < x2; k++)
            {
                graph[j][k] = true;
            }
        }
    }
    int res = 0;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (graph[i][j] == false)
            {
                BFS(i, j);
                res++;
            }
        }
    }
    sort(begin(areas), end(areas));
    cout << res << '\n';
    for (int i = 0; i < res; i++)
    {
        cout << areas[i] << ' ';
    }
    return 0;
}
void BFS(int a, int b)
{
    queue<pair<int, int>> q;
    q.push(make_pair(a, b));
    graph[a][b] = true;
    int area = 0;
    while (!q.empty())
    {
        int x = q.front().first;
        int y = q.front().second;
        q.pop();
        area++;
        for (int i = 0; i < 4; i++)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (nx >= 0 && nx < n && ny >= 0 && ny < m && graph[nx][ny] == false)
            {
                q.push(make_pair(nx, ny));
                graph[nx][ny] = true;
            }
        }
    }
    areas.push_back(area);
}
